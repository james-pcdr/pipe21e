{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#pipe21-simple-functional-pipes-docs","title":"pipe21 - simple functional pipes [docs]","text":""},{"location":"#basic-version","title":"Basic version","text":"<p>just copy-paste it!</p> <p>Most frequently used operators. It's often easier to copypaste than install and import.</p> <pre><code>class B:\n    def __init__(self, f): self.f = f\nclass Pipe  (B): __ror__ = lambda self, x: self.f(x)\nclass Map   (B): __ror__ = lambda self, x: map   (self.f, x)\nclass Filter(B): __ror__ = lambda self, x: filter(self.f, x)\n</code></pre> <p>or install using pip:</p> <pre><code>pip install pipe21\n</code></pre>"},{"location":"#examples","title":"Examples","text":""},{"location":"#little-docs","title":"little docs","text":"<pre><code>from pipe21 import *\n\nx | Pipe(f)   == f     (x   )\nx | Map(f)    == map   (f, x)\nx | Filter(f) == filter(f, x)\nx | Reduce(f) == reduce(f, x)\n</code></pre>"},{"location":"#simple-pipes","title":"simple pipes","text":"<pre><code>range(5) | Pipe(list) # [0, 1, 2, 3, 4]\nrange(5) | Map(str) | Pipe(''.join) # '01234'\nrange(5) | Filter(lambda x: x % 2 == 0) | Pipe(list) # [0, 2, 4]\nrange(5) | Reduce(lambda a, b: a + b) # 10\n</code></pre>"},{"location":"#print-digits","title":"print digits","text":"<p><pre><code>range(1_000_000) | Map(chr) | Filter(str.isdigit) | Pipe(''.join)\n</code></pre> Output:</p> <pre><code>0123456789\u00b2\u00b3\u00b9\u0660\u0661\u0662\u0663\u0664\u0665\u0666\u0667\u0668\u0669\u06f0\u06f1\u06f2\u06f3\u06f4\u06f5\u06f6\u06f7\u06f8\u06f9\u07c0\u07c1\u07c2\u07c3\u07c4\u07c5\u07c6\u07c7\u07c8\u07c9\u0966\u0967\u0968\u0969\u096a\u096b\u096c\u096d\u096e\u096f\u09e6\u09e7\u09e8\u09e9\u09ea\u09eb\u09ec\u09ed\u09ee\u09ef\u0a66\u0a67\u0a68\u0a69\u0a6a\u0a6b\u0a6c\u0a6d\u0a6e\u0a6f\u0ae6\u0ae7\u0ae8\u0ae9\u0aea\u0aeb\u0aec\u0aed\u0aee\u0aef\u0b66\u0b67\u0b68\u0b69\u0b6a\u0b6b\u0b6c\u0b6d\u0b6e\u0b6f\u0be6\u0be7\u0be8\u0be9\u0bea\u0beb\u0bec\u0bed\u0bee\u0bef\u0c66\u0c67\u0c68\u0c69\u0c6a\u0c6b\u0c6c\u0c6d\u0c6e\u0c6f\u0ce6\u0ce7\u0ce8\u0ce9\u0cea\u0ceb\u0cec\u0ced\u0cee\u0cef\u0d66\u0d67\u0d68\u0d69\u0d6a\u0d6b\u0d6c\u0d6d\u0d6e\u0d6f\u0de6\u0de7\u0de8\u0de9\u0dea\u0deb\u0dec\u0ded\u0dee\u0def\u0e50\u0e51\u0e52\u0e53\u0e54\u0e55\u0e56\u0e57\u0e58\u0e59\u0ed0\u0ed1\u0ed2\u0ed3\u0ed4\u0ed5\u0ed6\u0ed7\u0ed8\u0ed9\u0f20\u0f21\u0f22\u0f23\u0f24\u0f25\u0f26\u0f27\u0f28\u0f29\u1040\u1041\u1042\u1043\u1044\u1045\u1046\u1047\u1048\u1049\u1090\u1091\u1092\u1093\u1094\u1095\u1096\u1097\u1098\u1099\u1369\u136a\u136b\u136c\u136d\u136e\u136f\u1370\u1371\u17e0\u17e1\u17e2\u17e3\u17e4\u17e5\u17e6\u17e7\u17e8\u17e9\u1810\u1811\u1812\u1813\u1814\u1815\u1816\u1817\u1818\u1819\u1946\u1947\u1948\u1949\u194a\u194b\u194c\u194d\u194e\u194f\u19d0\u19d1\u19d2\u19d3\u19d4\u19d5\u19d6\u19d7\u19d8\u19d9\u19da\u1a80\u1a81\u1a82\u1a83\u1a84\u1a85\u1a86\u1a87\u1a88\u1a89\u1a90\u1a91\u1a92\u1a93\u1a94\u1a95\u1a96\u1a97\u1a98\u1a99\u1b50\u1b51\u1b52\u1b53\u1b54\u1b55\u1b56\u1b57\u1b58\u1b59\u1bb0\u1bb1\u1bb2\u1bb3\u1bb4\u1bb5\u1bb6\u1bb7\u1bb8\u1bb9\u1c40\u1c41\u1c42\u1c43\u1c44\u1c45\u1c46\u1c47\u1c48\u1c49\u1c50\u1c51\u1c52\u1c53\u1c54\u1c55\u1c56\u1c57\u1c58\u1c59\u2070\u2074\u2075\u2076\u2077\u2078\u2079\u2080\u2081\u2082\u2083\u2084\u2085\u2086\u2087\u2088\u2089\u2460\u2461\u2462\u2463\u2464\u2465\u2466\u2467\u2468\u2474\u2475\u2476\u2477\u2478\u2479\u247a\u247b\u247c\u2488\u2489\u248a\u248b\u248c\u248d\u248e\u248f\u2490\u24ea\u24f5\u24f6\u24f7\u24f8\u24f9\u24fa\u24fb\u24fc\u24fd\u24ff\u2776\u2777\u2778\u2779\u277a\u277b\u277c\u277d\u277e\u2780\u2781\u2782\u2783\u2784\u2785\u2786\u2787\u2788\u278a\u278b\u278c\u278d\u278e\u278f\u2790\u2791\u2792\ua620\ua621\ua622\ua623\ua624\ua625\ua626\ua627\ua628\ua629\ua8d0\ua8d1\ua8d2\ua8d3\ua8d4\ua8d5\ua8d6\ua8d7\ua8d8\ua8d9\ua900\ua901\ua902\ua903\ua904\ua905\ua906\ua907\ua908\ua909\ua9d0\ua9d1\ua9d2\ua9d3\ua9d4\ua9d5\ua9d6\ua9d7\ua9d8\ua9d9\ua9f0\ua9f1\ua9f2\ua9f3\ua9f4\ua9f5\ua9f6\ua9f7\ua9f8\ua9f9\uaa50\uaa51\uaa52\uaa53\uaa54\uaa55\uaa56\uaa57\uaa58\uaa59\uabf0\uabf1\uabf2\uabf3\uabf4\uabf5\uabf6\uabf7\uabf8\uabf9\uff10\uff11\uff12\uff13\uff14\uff15\uff16\uff17\uff18\uff19\ud801\udca0\ud801\udca1\ud801\udca2\ud801\udca3\ud801\udca4\ud801\udca5\ud801\udca6\ud801\udca7\ud801\udca8\ud801\udca9\ud802\ude40\ud802\ude41\ud802\ude42\ud802\ude43\ud803\udd30\ud803\udd31\ud803\udd32\ud803\udd33\ud803\udd34\ud803\udd35\ud803\udd36\ud803\udd37\ud803\udd38\ud803\udd39\ud803\ude60\ud803\ude61\ud803\ude62\ud803\ude63\ud803\ude64\ud803\ude65\ud803\ude66\ud803\ude67\ud803\ude68\ud804\udc52\ud804\udc53\ud804\udc54\ud804\udc55\ud804\udc56\ud804\udc57\ud804\udc58\ud804\udc59\ud804\udc5a\ud804\udc66\ud804\udc67\ud804\udc68\ud804\udc69\ud804\udc6a\ud804\udc6b\ud804\udc6c\ud804\udc6d\ud804\udc6e\ud804\udc6f\ud804\udcf0\ud804\udcf1\ud804\udcf2\ud804\udcf3\ud804\udcf4\ud804\udcf5\ud804\udcf6\ud804\udcf7\ud804\udcf8\ud804\udcf9\ud804\udd36\ud804\udd37\ud804\udd38\ud804\udd39\ud804\udd3a\ud804\udd3b\ud804\udd3c\ud804\udd3d\ud804\udd3e\ud804\udd3f\ud804\uddd0\ud804\uddd1\ud804\uddd2\ud804\uddd3\ud804\uddd4\ud804\uddd5\ud804\uddd6\ud804\uddd7\ud804\uddd8\ud804\uddd9\ud804\udef0\ud804\udef1\ud804\udef2\ud804\udef3\ud804\udef4\ud804\udef5\ud804\udef6\ud804\udef7\ud804\udef8\ud804\udef9\ud805\udc50\ud805\udc51\ud805\udc52\ud805\udc53\ud805\udc54\ud805\udc55\ud805\udc56\ud805\udc57\ud805\udc58\ud805\udc59\ud805\udcd0\ud805\udcd1\ud805\udcd2\ud805\udcd3\ud805\udcd4\ud805\udcd5\ud805\udcd6\ud805\udcd7\ud805\udcd8\ud805\udcd9\ud805\ude50\ud805\ude51\ud805\ude52\ud805\ude53\ud805\ude54\ud805\ude55\ud805\ude56\ud805\ude57\ud805\ude58\ud805\ude59\ud805\udec0\ud805\udec1\ud805\udec2\ud805\udec3\ud805\udec4\ud805\udec5\ud805\udec6\ud805\udec7\ud805\udec8\ud805\udec9\ud805\udf30\ud805\udf31\ud805\udf32\ud805\udf33\ud805\udf34\ud805\udf35\ud805\udf36\ud805\udf37\ud805\udf38\ud805\udf39\ud806\udce0\ud806\udce1\ud806\udce2\ud806\udce3\ud806\udce4\ud806\udce5\ud806\udce6\ud806\udce7\ud806\udce8\ud806\udce9\ud807\udc50\ud807\udc51\ud807\udc52\ud807\udc53\ud807\udc54\ud807\udc55\ud807\udc56\ud807\udc57\ud807\udc58\ud807\udc59\ud807\udd50\ud807\udd51\ud807\udd52\ud807\udd53\ud807\udd54\ud807\udd55\ud807\udd56\ud807\udd57\ud807\udd58\ud807\udd59\ud807\udda0\ud807\udda1\ud807\udda2\ud807\udda3\ud807\udda4\ud807\udda5\ud807\udda6\ud807\udda7\ud807\udda8\ud807\udda9\ud81a\ude60\ud81a\ude61\ud81a\ude62\ud81a\ude63\ud81a\ude64\ud81a\ude65\ud81a\ude66\ud81a\ude67\ud81a\ude68\ud81a\ude69\ud81a\udf50\ud81a\udf51\ud81a\udf52\ud81a\udf53\ud81a\udf54\ud81a\udf55\ud81a\udf56\ud81a\udf57\ud81a\udf58\ud81a\udf59\ud835\udfce\ud835\udfcf\ud835\udfd0\ud835\udfd1\ud835\udfd2\ud835\udfd3\ud835\udfd4\ud835\udfd5\ud835\udfd6\ud835\udfd7\ud835\udfd8\ud835\udfd9\ud835\udfda\ud835\udfdb\ud835\udfdc\ud835\udfdd\ud835\udfde\ud835\udfdf\ud835\udfe0\ud835\udfe1\ud835\udfe2\ud835\udfe3\ud835\udfe4\ud835\udfe5\ud835\udfe6\ud835\udfe7\ud835\udfe8\ud835\udfe9\ud835\udfea\ud835\udfeb\ud835\udfec\ud835\udfed\ud835\udfee\ud835\udfef\ud835\udff0\ud835\udff1\ud835\udff2\ud835\udff3\ud835\udff4\ud835\udff5\ud835\udff6\ud835\udff7\ud835\udff8\ud835\udff9\ud835\udffa\ud835\udffb\ud835\udffc\ud835\udffd\ud835\udffe\ud835\udfff\ud838\udd40\ud838\udd41\ud838\udd42\ud838\udd43\ud838\udd44\ud838\udd45\ud838\udd46\ud838\udd47\ud838\udd48\ud838\udd49\ud838\udef0\ud838\udef1\ud838\udef2\ud838\udef3\ud838\udef4\ud838\udef5\ud838\udef6\ud838\udef7\ud838\udef8\ud838\udef9\ud83a\udd50\ud83a\udd51\ud83a\udd52\ud83a\udd53\ud83a\udd54\ud83a\udd55\ud83a\udd56\ud83a\udd57\ud83a\udd58\ud83a\udd59\ud83c\udd00\ud83c\udd01\ud83c\udd02\ud83c\udd03\ud83c\udd04\ud83c\udd05\ud83c\udd06\ud83c\udd07\ud83c\udd08\ud83c\udd09\ud83c\udd0a'\n</code></pre>"},{"location":"#chunked","title":"chunked","text":"<pre><code>&gt;&gt;&gt; range(5) | Chunked(2) | Pipe(list)\n[(0, 1), (2, 3), (4,)]\n</code></pre>"},{"location":"#extended-version","title":"Extended version","text":"<pre><code>import pipe21 as P\n</code></pre>"},{"location":"#fizzbuzz","title":"FizzBuzz","text":"<pre><code>(\n    range(1, 100)\n    | P.MapSwitch([\n        (lambda i: i % 3 == i % 5 == 0, lambda x: 'FizzBuzz'),\n        (lambda i: i % 3 == 0, lambda x: 'Fizz'),\n        (lambda i: i % 5 == 0, lambda x: 'Buzz'),\n    ])\n    | P.Pipe(list)\n)\n\n[1, 2, 'Fizz', 4, 'Buzz', 'Fizz', 7, 8, 'Fizz', 'Buzz', 11, 'Fizz', 13, 14, 'FizzBuzz', 16, 17, 'Fizz', 19, 'Buzz', 'Fizz', 22, 23, 'Fizz', 'Buzz', 26, 'Fizz', 28, 29, 'FizzBuzz', 31, 32, 'Fizz', 34, 'Buzz', 'Fizz', 37, 38, 'Fizz', 'Buzz', 41, 'Fizz', 43, 44, 'FizzBuzz', 46, 47, 'Fizz', 49, 'Buzz', 'Fizz', 52, 53, 'Fizz', 'Buzz', 56, 'Fizz', 58, 59, 'FizzBuzz', 61, 62, 'Fizz', 64, 'Buzz', 'Fizz', 67, 68, 'Fizz', 'Buzz', 71, 'Fizz', 73, 74, 'FizzBuzz', 76, 77, 'Fizz', 79, 'Buzz', 'Fizz', 82, 83, 'Fizz', 'Buzz', 86, 'Fizz', 88, 89, 'FizzBuzz', 91, 92, 'Fizz', 94, 'Buzz', 'Fizz', 97, 98, 'Fizz']\n</code></pre>"},{"location":"#play-random-music-from-youtube-links-in-markdown-files","title":"play random music from youtube links in markdown files:","text":"<pre><code>import pathlib\nimport random\nimport itertools\nimport re\nimport operator\nimport webbrowser\nimport pipe21 as P\n\n\n(\n    pathlib.Path.home() / 'docs/knowledge/music'               # take a directory\n    | P.MethodCaller('rglob', '*.md')                          # find all markdown files\n    | P.FlatMap(lambda p: p | P.IterLines())                   # read all lines from all files and flatten into a single iterable\n    | P.FlatMap(lambda l: re.findall(r'\\[(.+)\\]\\((.+)\\)', l))  # keep only lines with a markdown link\n    | P.Map(operator.itemgetter(1))                            # extract a link\n    | P.Pipe(list)                                             # convert iterable of links into a list\n    | P.Pipe(random.choice)                                    # choose random link\n    | P.Pipe(webbrowser.open)                                  # open link in browser\n)\n</code></pre> <ul> <li>all available methods reference</li> <li>review of similar tools / alternatives</li> <li>written in pure python, no dependencies</li> </ul>"},{"location":"reference/","title":"reference","text":"<pre><code>&gt;&gt;&gt; from pipe21 import *\n</code></pre>"},{"location":"reference/#pipe","title":"Pipe","text":"<p>Put a value into a function as 1st argument</p> <pre><code>&gt;&gt;&gt; range(5) | Pipe(list)\n[0, 1, 2, 3, 4]\n\n&gt;&gt;&gt; 2 | Pipe(pow, 8)\n256\n\n&gt;&gt;&gt; 'FF' | Pipe(int, base=16)\n255\n\n&gt;&gt;&gt; b'\\x02\\x00' | Pipe(int.from_bytes, byteorder='big')\n512\n\n&gt;&gt;&gt; 'ab' | Pipe(enumerate, start=0) | Pipe(list)\n[(0, 'a'), (1, 'b')]\n\n&gt;&gt;&gt; import math\n&gt;&gt;&gt; 5.01 | Pipe(math.isclose, 5, abs_tol=0.01)\nTrue\n\n&gt;&gt;&gt; import random\n&gt;&gt;&gt; random.seed(44)\n&gt;&gt;&gt; [0, 1, 2] | Pipe(random.choices, [0.8, 0.15, 0.05], k=20)\n[0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0]\n\n&gt;&gt;&gt; import itertools\n&gt;&gt;&gt; [0, 1, 2] | Pipe(itertools.zip_longest, 'ab', fillvalue=None) | Pipe(list)\n[(0, 'a'), (1, 'b'), (2, None)]\n\n&gt;&gt;&gt; import operator\n&gt;&gt;&gt; [0, 1, 2] | Pipe(itertools.accumulate, operator.add, initial=100) | Pipe(list)\n[100, 100, 101, 103]\n</code></pre>"},{"location":"reference/#map","title":"Map","text":"<pre><code>&gt;&gt;&gt; range(5) | Map(str) | Pipe(''.join)\n'01234'\n</code></pre>"},{"location":"reference/#filter","title":"Filter","text":"<pre><code>&gt;&gt;&gt; range(5) | Filter(lambda x: x % 2 == 0) | Pipe(list)\n[0, 2, 4]\n</code></pre>"},{"location":"reference/#reduce","title":"Reduce","text":"<pre><code>&gt;&gt;&gt; import operator\n&gt;&gt;&gt; range(5) | Reduce(operator.add)\n10\n\n&gt;&gt;&gt; range(5) | Reduce(operator.add, 5)  # with initial value\n15\n\n&gt;&gt;&gt; [{1, 2}, {2, 3, 4}, {4, 5}] | Reduce(operator.or_)\n{1, 2, 3, 4, 5}\n</code></pre>"},{"location":"reference/#mapkeys","title":"MapKeys","text":"<pre><code>&gt;&gt;&gt; [(1, 10), (2, 20)] | MapKeys(str) | Pipe(list)\n[('1', 10), ('2', 20)]\n</code></pre>"},{"location":"reference/#mapvalues","title":"MapValues","text":"<pre><code>&gt;&gt;&gt; [(1, 10), (2, 20)] | MapValues(str) | Pipe(list)\n[(1, '10'), (2, '20')]\n</code></pre>"},{"location":"reference/#filterfalse","title":"FilterFalse","text":"<p>Same as <code>Filter</code> but negative</p> <pre><code>&gt;&gt;&gt; range(5) | FilterFalse(lambda x: x % 2 == 0) | Pipe(list)\n[1, 3]\n</code></pre>"},{"location":"reference/#filterkeys","title":"FilterKeys","text":"<p>Take <code>(k, v)</code> pairs iterable and keep only elements for which <code>predicate(k) == True</code>. If no predicate function is provided - default function <code>bool</code> will be used.</p> <pre><code>&gt;&gt;&gt; [(0, 2), (3, 0)] | FilterKeys() | Pipe(list)\n[(3, 0)]\n\n&gt;&gt;&gt; [(0, 2), (3, 0)] | FilterKeys(lambda x: x % 2 == 0) | Pipe(list)\n[(0, 2)]\n</code></pre>"},{"location":"reference/#filtervalues","title":"FilterValues","text":"<p>Same as <code>FilterKeys</code> but for <code>v</code> in <code>(k, v)</code> pairs</p> <pre><code>&gt;&gt;&gt; [(0, 2), (3, 0)] | FilterValues() | Pipe(list)\n[(0, 2)]\n\n&gt;&gt;&gt; [(0, 2), (3, 0)] | FilterValues(lambda x: x % 2 == 0) | Pipe(list)\n[(0, 2), (3, 0)]\n</code></pre>"},{"location":"reference/#flatmap","title":"FlatMap","text":"<pre><code>&gt;&gt;&gt; [0, 2, 3, 0, 4] | FlatMap(range) | Pipe(list)\n[0, 1, 0, 1, 2, 0, 1, 2, 3]\n\n&gt;&gt;&gt; [2, 3, 4] | FlatMap(lambda x: [(x, x), (x, x)]) | Pipe(list)\n[(2, 2), (2, 2), (3, 3), (3, 3), (4, 4), (4, 4)]\n\n&gt;&gt;&gt; def yield_even(it):\n...     for x in it:\n...         if x % 2 == 0:\n...             yield x\n&gt;&gt;&gt; [range(0, 5), range(100, 105)] | FlatMap(yield_even) | Pipe(list)\n[0, 2, 4, 100, 102, 104]\n\n&gt;&gt;&gt; [range(0, 5), range(100, 105)] | FlatMap(lambda it: (x for x in it if x % 2 == 0)) | Pipe(list)\n[0, 2, 4, 100, 102, 104]\n\n&gt;&gt;&gt; [range(0, 5), range(100, 105)] | FlatMap(lambda it: it | Filter(lambda x: x % 2 == 0)) | Pipe(list)\n[0, 2, 4, 100, 102, 104]\n</code></pre>"},{"location":"reference/#flatmapvalues","title":"FlatMapValues","text":"<pre><code>&gt;&gt;&gt; [(\"a\", [\"x\", \"y\", \"z\"]), (\"b\", [\"p\", \"r\"])] | FlatMapValues(lambda x: x) | Pipe(list)\n[('a', 'x'), ('a', 'y'), ('a', 'z'), ('b', 'p'), ('b', 'r')]\n\n&gt;&gt;&gt; [('a', [0, 1, 2]), ('b', [3, 4])] | FlatMapValues(yield_even) | Pipe(list)\n[('a', 0), ('a', 2), ('b', 4)]\n</code></pre>"},{"location":"reference/#keyby","title":"KeyBy","text":"<pre><code>&gt;&gt;&gt; range(2) | KeyBy(str) | Pipe(list)\n[('0', 0), ('1', 1)]\n</code></pre>"},{"location":"reference/#valueby","title":"ValueBy","text":"<pre><code>&gt;&gt;&gt; range(2) | ValueBy(str) | Pipe(list)\n[(0, '0'), (1, '1')]\n</code></pre>"},{"location":"reference/#append","title":"Append","text":"<pre><code>&gt;&gt;&gt; [(0,), (1,)] | Append(lambda x: str(x[0])) | Pipe(list)\n[(0, '0'), (1, '1')]\n\n&gt;&gt;&gt; [(0, '0'), (1, '1')] | Append(lambda x: str(x[0] * 10)) | Pipe(list)\n[(0, '0', '0'), (1, '1', '10')]\n</code></pre>"},{"location":"reference/#keys","title":"Keys","text":"<pre><code>&gt;&gt;&gt; [(0, 'a'), (1, 'b')] | Keys() | Pipe(list)\n[0, 1]\n</code></pre>"},{"location":"reference/#values","title":"Values","text":"<pre><code>&gt;&gt;&gt; [(0, 'a'), (1, 'b')] | Values() | Pipe(list)\n['a', 'b']\n</code></pre>"},{"location":"reference/#swapkv","title":"SwapKV","text":"<pre><code>&gt;&gt;&gt; [(0, 1), (2, 3)] | SwapKV() | Pipe(list)\n[(1, 0), (3, 2)]\n</code></pre>"},{"location":"reference/#grep","title":"Grep","text":"<pre><code>&gt;&gt;&gt; ['hello foo', 'world', 'awesome FOo'] | Grep('foo') | Pipe(list)\n['hello foo']\n\n# regex is supported (passed to re.search)\n&gt;&gt;&gt; ['foo1', 'foo2', '3foo', 'bar1'] | Grep('^foo.*') | Pipe(list)\n['foo1', 'foo2']\n\n# case-insensitive\n&gt;&gt;&gt; ['hello foo', 'world', 'awesome FOo'] | Grep('foo', i=True) | Pipe(list)\n['hello foo', 'awesome FOo']\n&gt;&gt;&gt; ['hello foo', 'world', 'awesome FOo'] | Grep('Foo', i=True) | Pipe(list)\n['hello foo', 'awesome FOo']\n\n# invert match\n&gt;&gt;&gt; ['hello foo', 'world', 'awesome FOo'] | Grep('foo', v=True) | Pipe(list)\n['world', 'awesome FOo']\n&gt;&gt;&gt; ['foo1', 'foo2', '3foo', 'bar1'] | Grep('^foo.*', v=True) | Pipe(list)\n['3foo', 'bar1']\n\n# invert match and case-insensitive\n&gt;&gt;&gt; ['hello foo', 'world', 'awesome FOo'] | Grep('foo', v=True, i=True) | Pipe(list)\n['world']\n&gt;&gt;&gt; ['hello foo', 'world', 'awesome FOo'] | Grep('Foo', v=True, i=True) | Pipe(list)\n['world']\n</code></pre>"},{"location":"reference/#iterlines","title":"IterLines","text":"<pre><code>&gt;&gt;&gt; import tempfile\n&gt;&gt;&gt; f = tempfile.NamedTemporaryFile('w+')\n&gt;&gt;&gt; f.write('hello\\nworld\\n')\n12\n&gt;&gt;&gt; f.seek(0)\n0\n&gt;&gt;&gt; f.name | IterLines() | Pipe(list)\n['hello', 'world']\n\n&gt;&gt;&gt; f.name | IterLines(strip=False) | Pipe(list)\n['hello\\n', 'world\\n']\n</code></pre>"},{"location":"reference/#count","title":"Count","text":"<p>useful for objects that don't have <code>__len__</code> method:</p> <pre><code>&gt;&gt;&gt; iter(range(3)) | Count()\n3\n</code></pre>"},{"location":"reference/#slice","title":"Slice","text":"<pre><code>&gt;&gt;&gt; range(5) | Slice(2) | Pipe(list)\n[0, 1]\n&gt;&gt;&gt; range(5) | Slice(2, 4) | Pipe(list)\n[2, 3]\n&gt;&gt;&gt; range(5) | Slice(2, None) | Pipe(list)\n[2, 3, 4]\n&gt;&gt;&gt; range(5) | Slice(0, None, 2) | Pipe(list)\n[0, 2, 4]\n</code></pre>"},{"location":"reference/#take","title":"Take","text":"<pre><code>&gt;&gt;&gt; range(5) | Take(3)\n[0, 1, 2]\n</code></pre> <pre><code>## Sorted\n\n```py\n&gt;&gt;&gt; '3510' | Sorted()\n['0', '1', '3', '5']\n\n&gt;&gt;&gt; '3510' | Sorted(reverse=True)\n['5', '3', '1', '0']\n\n&gt;&gt;&gt; '!*&amp;)#' | Sorted(key=ord)\n['!', '#', '&amp;', ')', '*']\n\n&gt;&gt;&gt; '!*&amp;)#' | Sorted(key=ord, reverse=True)\n['*', ')', '&amp;', '#', '!']\n</code></pre>"},{"location":"reference/#groupby","title":"GroupBy","text":"<p>Note: <code>GroupBy</code> sorts iterable before grouping. If you pass key function, eg <code>GroupBy(len)</code>, it also will be used as sorting key.</p> <pre><code>&gt;&gt;&gt; import operator\n&gt;&gt;&gt; [(0, 'a'), (1, 'c'), (0, 'b'), (2, 'd')] | GroupBy(operator.itemgetter(0)) | MapValues(list) | Pipe(list)\n[(0, [(0, 'a'), (0, 'b')]), (1, [(1, 'c')]), (2, [(2, 'd')])]\n\n&gt;&gt;&gt; ['ab', 'cd', 'e', 'f', 'gh', 'ij'] | GroupBy(len) | MapValues(list) | Pipe(list)\n[(1, ['e', 'f']), (2, ['ab', 'cd', 'gh', 'ij'])]\n</code></pre>"},{"location":"reference/#reducebykey","title":"ReduceByKey","text":"<pre><code>&gt;&gt;&gt; import operator\n&gt;&gt;&gt; [('a', 1), ('b', 1), ('a', 1)] | ReduceByKey(operator.add)\n[('a', 2), ('b', 1)]\n</code></pre>"},{"location":"reference/#apply","title":"Apply","text":"<pre><code>&gt;&gt;&gt; import random\n&gt;&gt;&gt; random.seed(42)\n&gt;&gt;&gt; range(5) | Pipe(list) | Apply(random.shuffle)\n[3, 1, 2, 4, 0]\n</code></pre>"},{"location":"reference/#starpipe","title":"StarPipe","text":"<pre><code>&gt;&gt;&gt; (1, 2) | StarPipe(operator.add)\n3\n\n&gt;&gt;&gt; ('FF', 16) | StarPipe(int)\n255\n\n&gt;&gt;&gt; ([1, 2], 'A') | StarPipe(dict.fromkeys)\n{1: 'A', 2: 'A'}\n\n&gt;&gt;&gt; ({1, 2}, {3, 4, 5}) | StarPipe(set.union)\n{1, 2, 3, 4, 5}\n</code></pre>"},{"location":"reference/#starmap","title":"StarMap","text":"<pre><code>&gt;&gt;&gt; [(2, 5), (3, 2), (10, 3)] | StarMap(pow) | Pipe(list)\n[32, 9, 1000]\n&gt;&gt;&gt; [('00', 16), ('A5', 16), ('FF', 16)] | StarMap(int) | Pipe(list)\n[0, 165, 255]\n</code></pre>"},{"location":"reference/#starflatmap","title":"StarFlatMap","text":"<pre><code>&gt;&gt;&gt; range(2, 10) | Pipe(itertools.permutations, r=2) | StarFlatMap(lambda a, b: [(a, b)] if a % b == 0 else []) | Pipe(list)\n[(4, 2), (6, 2), (6, 3), (8, 2), (8, 4), (9, 3)]\n</code></pre>"},{"location":"reference/#mapapply","title":"MapApply","text":"<pre><code>&gt;&gt;&gt; import random\n&gt;&gt;&gt; random.seed(42)\n&gt;&gt;&gt; range(3, 5) | Map(range) | Map(list) | MapApply(random.shuffle) | Pipe(list)\n[[1, 0, 2], [3, 1, 2, 0]]\n\n&gt;&gt;&gt; def setitem(key, value):\n...     def inner(x):\n...         x[key] = value\n...     return inner\n&gt;&gt;&gt; [{'hello': 'world'}] | MapApply(setitem('foo', 'bar')) | Pipe(list)\n[{'hello': 'world', 'foo': 'bar'}]\n</code></pre>"},{"location":"reference/#switch","title":"Switch","text":"<pre><code>&gt;&gt;&gt; cases = [\n...     (lambda i: i % 3 == i % 5 == 0, lambda x: 'FizzBuzz'),\n...     (lambda i: i % 3 == 0, lambda x: 'Fizz'),\n...     (lambda i: i % 5 == 0, lambda x: 'Buzz'),\n...     (lambda i: i &gt; 100, lambda x: f'{x} is large'),\n... ]\n&gt;&gt;&gt; 1 | Switch(cases)\n1\n&gt;&gt;&gt; 3 | Switch(cases)\n'Fizz'\n&gt;&gt;&gt; 5 | Switch(cases)\n'Buzz'\n&gt;&gt;&gt; 15 | Switch(cases)\n'FizzBuzz'\n&gt;&gt;&gt; 101 | Switch(cases)\n'101 is large'\n</code></pre>"},{"location":"reference/#mapswitch","title":"MapSwitch","text":"<pre><code>&gt;&gt;&gt; range(1, 20) | MapSwitch(cases) | Pipe(list)\n[1, 2, 'Fizz', 4, 'Buzz', 'Fizz', 7, 8, 'Fizz', 'Buzz', 11, 'Fizz', 13, 14, 'FizzBuzz', 16, 17, 'Fizz', 19]\n&gt;&gt;&gt; range(5) | MapSwitch([(lambda x: x % 2 == 0, lambda x: x * 100)]) | Pipe(list)\n[0, 1, 200, 3, 400]\n</code></pre>"},{"location":"reference/#yieldif","title":"YieldIf","text":"<p>Takes a function to map values (optional, by default there's no mapping) and a key. If key is false, value will not be yielded. Key is optional, default is <code>bool</code></p> <pre><code>&gt;&gt;&gt; range(5) | YieldIf(lambda x: x * 100) | Pipe(list)\n[100, 200, 300, 400]\n&gt;&gt;&gt; range(5) | YieldIf(lambda x: x * 100, key=lambda x: x % 2 == 0) | Pipe(list)\n[0, 200, 400]\n&gt;&gt;&gt; range(5) | YieldIf(key=lambda x: x % 2 == 0) | Pipe(list)\n[0, 2, 4]\n&gt;&gt;&gt; range(5) | YieldIf() | Pipe(list)\n[1, 2, 3, 4]\n</code></pre>"},{"location":"reference/#join","title":"Join","text":"<pre><code>&gt;&gt;&gt; range(5) | Join(range(2, 5)) | Pipe(list)\n[(2, 2), (3, 3), (4, 4)]\n\n&gt;&gt;&gt; range(1, 7) | Join(range(2, 6), key=lambda x, y: x % y == 0) | Pipe(list)\n[(2, 2), (3, 3), (4, 2), (4, 4), (5, 5), (6, 2), (6, 3)]\n</code></pre>"},{"location":"reference/#getitem","title":"GetItem","text":"<pre><code>&gt;&gt;&gt; {'a': 'b'} | GetItem('a')\n'b'\n</code></pre>"},{"location":"reference/#setitem","title":"SetItem","text":"<pre><code>&gt;&gt;&gt; {'a': 'b'} | SetItem('foo', 'bar')\n{'a': 'b', 'foo': 'bar'}\n</code></pre>"},{"location":"reference/#delitem","title":"DelItem","text":"<pre><code>&gt;&gt;&gt; {'a': 'b'} | DelItem('a')\n{}\n</code></pre>"},{"location":"reference/#getattr","title":"GetAttr","text":"<pre><code>&gt;&gt;&gt; from types import SimpleNamespace\n&gt;&gt;&gt; SimpleNamespace(a='b') | GetAttr('a')\n'b'\n</code></pre>"},{"location":"reference/#setattr","title":"SetAttr","text":"<pre><code>&gt;&gt;&gt; SimpleNamespace(a='b') | SetAttr('foo', 'bar')\nnamespace(a='b', foo='bar')\n</code></pre>"},{"location":"reference/#delattr","title":"DelAttr","text":"<pre><code>&gt;&gt;&gt; SimpleNamespace(a='b') | DelAttr('a')\nnamespace()\n</code></pre>"},{"location":"reference/#mapgetitem","title":"MapGetItem","text":"<pre><code>&gt;&gt;&gt; [{'a': 'b'}] | MapGetItem('a') | Pipe(list)\n['b']\n</code></pre>"},{"location":"reference/#mapsetitem","title":"MapSetItem","text":"<pre><code>&gt;&gt;&gt; [{'a': 'b'}] | MapSetItem('foo', 'bar') | Pipe(list)\n[{'a': 'b', 'foo': 'bar'}]\n</code></pre>"},{"location":"reference/#mapdelitem","title":"MapDelItem","text":"<pre><code>&gt;&gt;&gt; [{'a': 'b'}] | MapDelItem('a') | Pipe(list)\n[{}]\n</code></pre>"},{"location":"reference/#mapgetattr","title":"MapGetAttr","text":"<pre><code>&gt;&gt;&gt; [SimpleNamespace(a='b')] | MapGetAttr('a') | Pipe(list)\n['b']\n</code></pre>"},{"location":"reference/#mapsetattr","title":"MapSetAttr","text":"<pre><code>&gt;&gt;&gt; [SimpleNamespace(a='b')] | MapSetAttr('foo', 'bar') | Pipe(list)\n[namespace(a='b', foo='bar')]\n</code></pre>"},{"location":"reference/#mapdelattr","title":"MapDelAttr","text":"<pre><code>&gt;&gt;&gt; [SimpleNamespace(a='b')] | MapDelAttr('a') | Pipe(list)\n[namespace()]\n</code></pre>"},{"location":"reference/#methodcaller","title":"MethodCaller","text":"<pre><code>&gt;&gt;&gt; class K:\n...     def hello(self):\n...         return 'hello'\n...     def increment(self, i, add=1):\n...         return i + add\n&gt;&gt;&gt; k = K()\n&gt;&gt;&gt; k | MethodCaller('hello')\n'hello'\n&gt;&gt;&gt; k | MethodCaller('increment', 1)\n2\n&gt;&gt;&gt; k | MethodCaller('increment', 1, add=2)\n3\n</code></pre>"},{"location":"reference/#mapmethodcaller","title":"MapMethodCaller","text":"<pre><code>&gt;&gt;&gt; [k] | MapMethodCaller('hello') | Pipe(list)\n['hello']\n</code></pre>"},{"location":"reference/#unique","title":"Unique","text":"<pre><code>&gt;&gt;&gt; ['a', 'cd', 'cd', 'e', 'fgh'] | Unique() | Pipe(list)\n['a', 'cd', 'e', 'fgh']\n\n&gt;&gt;&gt; ['a', 'cd', 'cd', 'e', 'fgh'] | Unique(len) | Pipe(list)\n['a', 'cd', 'fgh']\n\n&gt;&gt;&gt; [{'a': 1}, {'a': 2}, {'a': 1}] | Unique(operator.itemgetter('a')) | Pipe(list)\n[{'a': 1}, {'a': 2}]\n</code></pre>"},{"location":"reference/#exec","title":"Exec","text":"<pre><code>&gt;&gt;&gt; v = 42\n&gt;&gt;&gt; random.seed(42)\n&gt;&gt;&gt; x = [0, 1, 2]\n\n&gt;&gt;&gt; v | Exec(lambda: random.shuffle(x))\n42\n&gt;&gt;&gt; x\n[1, 0, 2]\n\n&gt;&gt;&gt; random.seed(42)\n&gt;&gt;&gt; x = [0, 1, 2]\n&gt;&gt;&gt; v | Exec(random.shuffle, x)\n42\n&gt;&gt;&gt; x\n[1, 0, 2]\n&gt;&gt;&gt; u = []\n&gt;&gt;&gt; v | Exec(lambda: u.append(1))\n42\n&gt;&gt;&gt; u\n[1]\n&gt;&gt;&gt; v | Exec(u.append, 2)\n42\n&gt;&gt;&gt; u\n[1, 2]\n&gt;&gt;&gt; x = [2, 0, 1]\n&gt;&gt;&gt; x | Exec(x.sort, reverse=True)\n[2, 1, 0]\n</code></pre>"},{"location":"reference/#chunked","title":"Chunked","text":"<pre><code>&gt;&gt;&gt; range(5) | Chunked(2) | Pipe(list)\n[(0, 1), (2, 3), (4,)]\n\n&gt;&gt;&gt; range(5) | Chunked(3) | Pipe(list)\n[(0, 1, 2), (3, 4)]\n</code></pre>"},{"location":"similar-tools/","title":"similar tools","text":"<ul> <li>pytoolz/toolz: A functional standard library for Python.<ul> <li>\u0410\u0440\u0441\u0435\u043d\u0438\u0439 \u0421\u0430\u043f\u0435\u043b\u043a\u0438\u043d \u2014 \u0424\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0432 Python: \u0435\u0436\u0435\u0434\u043d\u0435\u0432\u043d\u044b\u0435 \u0440\u0435\u0446\u0435\u043f\u0442\u044b - YouTube</li> </ul> </li> <li>more-itertools/more-itertools: More routines for operating on iterables, beyond itertools</li> <li>nekitdev/iters.py: Rich Iterators for Python.</li> <li>R adds native pipe and lambda syntax | Hacker News</li> <li>mpypl - Google Search<ul> <li>\u0414\u043c\u0438\u0442\u0440\u0438\u0439 \u0421\u043e\u0448\u043d\u0438\u043a\u043e\u0432 \u2014 mPyPl: \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 Python - YouTube</li> </ul> </li> <li>JulienPalard/Pipe: A Python library to use infix notation in Python</li> <li>Pydash: A Kitchen Sink of Missing Python Utilities | by Khuyen Tran | Towards Data Science</li> <li>Write Clean Python Code Using Pipes | by Khuyen Tran | Oct, 2021 | Towards Data Science</li> <li>A trick to have arbitrary infix operators in Python | Hacker News</li> <li>PySpark - RDD API</li> <li>altimin/fcollections</li> <li>InvestmentSystems/function-pipe: Tools for extended function composition and pipelines in Python</li> <li>kachayev/fn.py: Functional programming in Python: implementation of missing features to enjoy FP</li> <li>man-group/mdf: Data-flow programming toolkit for Python</li> <li>0101/pipetools: Functional plumbing for Python</li> <li>EntilZha/PyFunctional: Python library for creating data pipelines with chain functional programming</li> <li>jasondelaat/pymonad: </li> <li>machow/siuba: Python library for using dplyr like syntax with pandas and SQL</li> <li>pipeop \u00b7 PyPI</li> <li>Suor/funcy: A fancy and practical functional tools</li> <li>igrishaev/f: Functional stuff for Python</li> <li>Language Integrated Query (LINQ) in C# | Microsoft Learn</li> <li>chain-ops-python: Simple chaining of operations (a.k.a. pipe operator) in python</li> <li>sammyrulez/typed-monads: Easy functional monads for your python code</li> <li>PRQL/prql: PRQL is a modern language for transforming data \u2014 a simple, powerful, pipelined SQL replacement</li> <li>viralogic/py-enumerable: A Python module used for interacting with collections of objects using LINQ syntax- jmfernandes/pyLINQ: a simple and easy way to filter and sort lists.</li> <li>evhub/coconut: Simple, elegant, Pythonic functional programming.</li> <li>petl-developers/petl: Python Extract Transform and Load Tables of Data</li> <li>Show HN: Pypipe \u2013 A Python command-line tool for pipeline processing | Hacker News</li> <li>Marcel the Shell | Hacker News</li> <li>cgarciae/pypeln: Concurrent data pipelines in Python &gt;&gt;&gt;</li> <li>sfermigier/awesome-functional-python: A curated list of awesome things related to functional programming in Python.</li> </ul>"}]}